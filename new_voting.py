#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    May 01, 2020 06:35:34 PM UTC  platform: Linux

import sys
import math
from hashlib import sha256
from datetime import datetime
from os import path
import json

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import messagebox

import new_voting_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    new_voting_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    new_voting_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    vote_time = datetime.now()
    vote_time = vote_time.strftime("%Y-%m-%d %H:%M:%S")
    
    # Generate sha256
    def generateHash(self, txt):
    	hash_value = sha256(str(txt).encode())
    	return hash_value.hexdigest()
    	
    # Calculate nonce
    def calculateNonce(self, data):
    	nonce = 0
    	hashing = self.generateHash(data + str(nonce))
    	
    	while hashing[:3] != '000':
    		nonce += 1
    		hashing = self.generateHash(data + str(nonce))
    	return nonce, hashing
    	
    # Preparing for genesis block
    def createGenesis(self):
    	file_create = open('e_votes.dat','w+')
    	data = "00" + str(vote_time) + "00"
    	nonce, hashing = self.calculateNonce(data)
    	genesis = [{"block_no":1, "vote_from":0, "vote_to":0, "vote_time":str(self.vote_time), "vote_val":0, "prev_hash": 0, "nonce": nonce, "cur_hash" : hashing}]
    	file_create.write(json.dumps(genesis))
    	file_create.close()
    	
    # Checking the file exists or not
    def checkFile(self):
    	global file_check
    	file_check = path.exists('e_votes.dat')
    	if file_check:
    		#print('File exists!')
    		check_content = open('e_votes.dat','r')
    		if check_content.read() == "":
    			self.createGenesis()
    			#print('New file updated!')
    		#else:
    			#print('File is OK !')
    	else:
    		self.createGenesis()
    		#print('New file created!')
    		
    # Checking the voting time
    def checkVotingTime():
    	votingTime_data = self.readFromFile('my_votingTime.dat')
    	startTime = datetime.strptime(votingTime_data[0]['startTime'], "%Y-%m-%d %H:%M:%S")
    	endTime = datetime.strptime(votingTime_data[1]['endTime'], "%Y-%m-%d %H:%M:%S")
    	if startTime > vote_time:
    		print('Error ! Voting time is not yet reached !')
    		exit()
    	elif vote_time > endTime:
    		print('Error ! Voting time has completed !')
    		exit()
    	
    # Reading a file
    def readFromFile(self, filename):
    	file_read = open(filename, 'r')
    	file_data = file_read.read()
    	file_read.close()
    	file_data = json.loads(str(file_data))
    	return file_data
    	
    # Checking EPIC Number
    def btnCheckEPIC(self):
    	vote_from = self.Entry1.get()
    	res = ""
    	if vote_from == "":
    		res = "* Please enter the EPIC Number !"
    	else:
    		found = 0
    		self.edata = dict()
    		res = "* EPIC Number does not exist !"
    		epic_details = self.readFromFile('list_epic.dat')
    		for i in range(len(epic_details)):
    			if epic_details[i]['epic_no'] == vote_from:
    				found = 1
    				res = "* Valid Voter !"
    				self.edata['Sl.No'] = epic_details[i]['Sl.No']
    				self.edata['name'] = epic_details[i]['name']
    				self.edata['father_name'] = epic_details[i]['father_name']
    				self.edata['consty'] = epic_details[i]['constituency']
    				break
    		if found == 1:
    			cdetails = self.readFromFile('list_candidates.dat')
    			for j in range(len(cdetails)):
    				if cdetails[j]['epic_no'] == vote_from:
    					res = "* You are a candidate, not a valid voter !"
    					found = 2
    					break
    			vdetails = self.readFromFile('e_votes.dat')
    			
    			for k in range(len(vdetails)):
    				if vdetails[k]['vote_from'] == self.generateHash(vote_from):
    					res = "* You have already voted !"
    					found = 3
    					break
    					
    		if found == 1:
    			self.Entry1.config(state = 'disabled')
    			self.Entry2.focus_set()
    			self.Label4.place(relx=0.126, rely=0.507, height=21, width=168)
    			self.Entry2.place(relx=0.484, rely=0.507,height=23, relwidth=0.434)
    			self.Label5.place(relx=0.168, rely=0.597, height=21, width=329)
    			self.Button2.place(relx=0.211, rely=0.716, height=31, width=301)
    			res = "* EPIC Number successfully verified !"
    	self.Label3.configure(text=res)
    	
    # Checking AADHAAR Number
    def btnCheckAADHAAR(self):
    	aadhaar = self.Entry2.get()
    	found = False
    	res = "* AADHAAR Number does not exist !"
    	if aadhaar == "":
    		res = "* Please enter your AADHAAR Number !"
    	elif not aadhaar.isdigit():
    		res = "* Please enter a valid AADHAAR Number !"
    	elif aadhaar.isdigit() and len(aadhaar) != 12:
    		res = "* Please enter a valid AADHAAR Number"
    	else:
    		self.adata = dict()
    		adar_details = self.readFromFile('list_aadhaar.dat')
    		for i in range(len(adar_details)):
    			if adar_details[i]['aadhaar_no'] == aadhaar:
    				found = True
    				res = "* AADHAAR Number does not matched !"
    				self.adata['name'] = adar_details[i]['name']
    				self.adata['father_name'] = adar_details[i]['father_name']
    				break
    		if found:
    			if self.edata['name'] == self.adata['name'] and self.edata['father_name'] == self.adata['father_name']:
    				res = "* Succesfully verified !"
    				self.Entry2.config(state = 'disabled')
    				self.Button4.place(relx=0.211, rely=0.716, height=31, width=301)
    				self.Button4.focus_set()
    				
    	self.Label5.configure(text=res)
    	
    # Continue to Vote
    def btnContinue(self):
    	self.Frame2.place(relx=0.117, rely=0.067, relheight=0.744, relwidth=0.792)
    	self.vote_time = datetime.now()
    	self.vote_time = self.vote_time.strftime("%Y-%m-%d %H:%M:%S")
    	self.Label8.configure(text=self.edata['name'])
    	self.Label10.configure(text=self.edata['consty'])
    	self.Label12.configure(text=self.vote_time)
    	candidates = self.readFromFile('list_candidates.dat')
    	y = 0.507
    	for k in range(len(candidates)):
    		if self.edata['consty'] == candidates[k]['constituency']:
    			self.Radiobutton1 = tk.Radiobutton(self.Frame2)
    			self.Radiobutton1.place(relx=0.105, rely=y, relheight=0.069, relwidth=0.459)
    			self.Radiobutton1.configure(justify='left', anchor='w')
    			self.Radiobutton1.configure(text=candidates[k]['name'], value=candidates[k]['epic_no'], variable=self.vote_to)
    			y = y + 0.060
    	self.Radiobutton2 = tk.Radiobutton(self.Frame2)
    	self.Radiobutton2.place(relx=0.105, rely=y, relheight=0.069, relwidth=0.459)
    	self.Radiobutton2.configure(justify='left', anchor='w')
    	self.Radiobutton2.configure(text="NOTA", value="NOTA"+candidates[k]['constituency'], variable=self.vote_to)
    	
    # Validate and Save Vote
    def btnSaveVote(self):
    	candidates = self.readFromFile('list_candidates.dat')
    	if self.vote_to.get() == "":
    		res = "Please choose a Candidate to Vote !"
    	else:
    		self.Label14.configure(text="")
    		if self.vote_to.get()[:4] == "NOTA":
    			res = "You have selected NOTA !"
    			name = "NOTA"
    		else:
    			for i in range(len(candidates)):
    				if candidates[i]['epic_no'] == self.vote_to.get():
    					name = candidates[i]['name']
    					res = "You have selected " + candidates[i]['name'] + "!"
    					break
    		test = tk.messagebox.askyesno("Confirm","Are you sure to give Vote to "+name+ "?", parent=self.Frame2)
    		if test:
    			res = "You have voted " + name + "!"
    			# Function call to add block
    			self.addBlocks()
    			self.Button6.place(relx=0.232, rely=0.866, height=31, width=271)
    			self.Button6.focus_set()
    		else:
    			res = "Please choose your option !"
    			self.Radiobutton1.deselect()
    		
    	self.Label14.configure(text=res)
    	
    # Function to add votes to the voting ledger		
    def addBlocks(self):
    	vote_from = self.Entry1.get()
    	vote_to = self.vote_to.get()
    	#tk.messagebox.showinfo("Testing", vote_from+" "+vote_to, parent=self.Frame2)
    	votes_details = self.readFromFile('e_votes.dat')
    	block_no = len(votes_details)
    	data2hash = str(self.generateHash(vote_from)) + str(self.generateHash(vote_to)) + str(self.vote_time) + str(1) + str(votes_details[block_no - 1]['cur_hash'])
    	nonce, hashing = self.calculateNonce(data2hash)
    	new_block = {"block_no": block_no+1, "vote_from": self.generateHash(vote_from), "vote_to": self.generateHash(vote_to), "vote_time": str(self.vote_time), "vote_val": "1", "prev_hash": str(votes_details[block_no - 1]['cur_hash']), "nonce": nonce, "cur_hash": hashing}
    	votes_details.append(new_block)
    	
    	file_update = open('e_votes.dat','w')
    	file_update.write(json.dumps(votes_details))
    	file_update.close()
    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+501+179")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("E Voting System")
        top.configure(highlightcolor="black")
        
        self.vote_to = tk.StringVar()
        
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.117, rely=0.067, relheight=0.744
                , relwidth=0.792)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.295, rely=0.06, height=21, width=194)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Welcome to E-Voting System''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.147, rely=0.269, height=21, width=132)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Enter EPIC Number:''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.442, rely=0.269,height=23, relwidth=0.434)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.focus_set()

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.168, rely=0.388, height=21, width=329)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''''')        	

        self.Button1 = tk.Button(self.Frame1, command=self.btnCheckEPIC)
        self.Button1.place(relx=0.211, rely=0.716, height=31, width=301)
        self.Button1.configure(text='''VALIDATE EPIC NUMBER''')
        
        self.Label4 = tk.Label(self.Frame1)
        #self.Label4.place(relx=0.126, rely=0.507, height=21, width=168)
        self.Label4.configure(text='Enter AADHAAR Number:')

        self.Entry2 = tk.Entry(self.Frame1)
        #self.Entry2.place(relx=0.484, rely=0.507,height=23, relwidth=0.434)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(selectbackground="#c4c4c4")

        self.Label5 = tk.Label(self.Frame1)
        #self.Label5.place(relx=0.168, rely=0.597, height=21, width=329)
        self.Label5.configure(text='''''')

        self.Button2 = tk.Button(self.Frame1, command=self.btnCheckAADHAAR)
        #self.Button2.place(relx=0.211, rely=0.716, height=31, width=301)
        self.Button2.configure(text='VALIDATE AADHAAR NUMBER')
        
        self.Button4 = tk.Button(self.Frame1, command=self.btnContinue)
        #self.Button4.place(relx=0.211, rely=0.716, height=31, width=301)
        self.Button4.configure(text='CONTINUE TO VOTE')
        
        self.Button3 = tk.Button(self.Frame1, command=root.destroy)
        self.Button3.place(relx=0.211, rely=0.836, height=31, width=301)
        self.Button3.configure(activebackground="#f9f9f9")
        self.Button3.configure(text='''EXIT''')
        
        # Frame2
        self.Frame2 = tk.Frame(top)
        #self.Frame2.place(relx=0.117, rely=0.067, relheight=0.744, relwidth=0.792)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")

        self.Label6 = tk.Label(self.Frame2)
        self.Label6.place(relx=0.168, rely=0.03, height=21, width=309)
        self.Label6.configure(text='''! VOTE HERE !''')

        self.Label7 = tk.Label(self.Frame2)
        self.Label7.place(relx=0.042, rely=0.149, height=21, width=109)
        self.Label7.configure(justify='left')
        self.Label7.configure(text='''Name:''', anchor='w', justify="left")

        self.Label8 = tk.Label(self.Frame2)
        self.Label8.place(relx=0.295, rely=0.149, height=21, width=239)
        #self.Label8.configure(text=self.edata['name'])
        self.Label8.configure(anchor='w', justify='left')

        self.Label9 = tk.Label(self.Frame2)
        self.Label9.place(relx=0.042, rely=0.209, height=21, width=108)
        self.Label9.configure(text='''Constituency:''', anchor='w')

        self.Label10 = tk.Label(self.Frame2)
        self.Label10.place(relx=0.295, rely=0.209, height=21, width=239)
        #self.Label10.configure(text=self.edata['consty'])
        self.Label10.configure(anchor='w', justify='left')

        self.Label11 = tk.Label(self.Frame2)
        self.Label11.place(relx=0.042, rely=0.269, height=21, width=115)
        self.Label11.configure(text='''Date and Time:''', anchor='w')

        self.Label12 = tk.Label(self.Frame2)
        self.Label12.place(relx=0.295, rely=0.269, height=21, width=239)
        #self.Label12.configure(text=vote_time)
        self.Label12.configure(anchor = 'w', justify='left')

        self.Label13 = tk.Label(self.Frame2)
        self.Label13.place(relx=0.232, rely=0.418, height=21, width=263)
        self.Label13.configure(text='''CHOOSE YOUR CANDIDATE HERE''')

        '''
        self.Radiobutton1 = tk.Radiobutton(self.Frame2)
        self.Radiobutton1.place(relx=0.105, rely=0.507, relheight=0.069
                , relwidth=0.459)
        self.Radiobutton1.configure(justify='left', anchor='w')
        self.Radiobutton1.configure(text='Radio1', value="Radio1", variable=self.vote_to)
        #self.Radiobutton1.deselect()

        self.Radiobutton2 = tk.Radiobutton(self.Frame2)
        self.Radiobutton2.place(relx=0.105, rely=0.567, relheight=0.069
                , relwidth=0.459)
        self.Radiobutton2.configure(justify='left', anchor='w')
        self.Radiobutton2.configure(text='Radio2', value="Radio2", variable=self.vote_to)
        #self.Radiobutton2.deselect()

        self.Radiobutton3 = tk.Radiobutton(self.Frame2)
        self.Radiobutton3.place(relx=0.105, rely=0.627, relheight=0.069
                , relwidth=0.459)
        self.Radiobutton3.configure(justify='left', anchor='w')
        self.Radiobutton3.configure(text='Radio3', value="Radio3", variable=self.vote_to)
        #self.Radiobutton3.deselect()

        self.Radiobutton4 = tk.Radiobutton(self.Frame2)
        self.Radiobutton4.place(relx=0.105, rely=0.687, relheight=0.069
                , relwidth=0.459)
        self.Radiobutton4.configure(justify='left', anchor='w')
        self.Radiobutton4.configure(text='Radio4', value="Radio4", variable=self.vote_to)
        #self.Radiobutton4.deselect()
        '''

        self.Label14 = tk.Label(self.Frame2)
        self.Label14.place(relx=0.189, rely=0.806, height=21, width=309)
        self.Label14.configure(text='''''')

        self.Button5 = tk.Button(self.Frame2, command=self.btnSaveVote)
        self.Button5.place(relx=0.232, rely=0.866, height=31, width=271)
        self.Button5.configure(text='''GIVE VOTE''')
        
        self.Button6 = tk.Button(self.Frame2, command=root.destroy)
        #self.Button6.place(relx=0.232, rely=0.866, height=31, width=271)
        self.Button6.configure(text='''EXIT''')
	
        

if __name__ == '__main__':
    vp_start_gui()


